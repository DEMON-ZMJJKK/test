#include <bits/stdc++.h>
using namespace std;
string s;
int flag[110];
char ans[110][110];
int n,num=0;
struct node
{
    int l=-1,r=-1;
    char id;
    vector<char>val;
}t[110];
int find(int x,char ch)
{
    for(char c:t[x].val)
        if(c==ch)return 1;
    return 0;
}
int add(char ch)
{
    for(int i=num-1;i>=0;i--)
        if(ch==t[i].id||find(i,ch))return i;
    t[num].id=ch;
    return num++;
}
void add_op(char op,char ch,int l, int r)
{
    for(int i=num-1;i>=0;i--)
        if(t[i].id==op&&t[i].l==l&&t[i].r==r)
    {
        t[i].val.push_back(ch);return;
    }
    t[num].id=op;
    t[num].l=l;
    t[num].r=r;
    t[num].val.push_back(ch);
    num++;
}
void dfs(int x)
{
    if(t[x].l!=-1)
    {
        flag[x]=1;
        dfs(t[x].l);
        dfs(t[x].r);
    }
}
char exist(int x)
{
    char ans=0;
    for(char c:t[x].val)
        if(c=='A'||c=='B')ans=c;
    return ans!=0?ans:t[x].val[0];
}
int main()
{
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>s;
        int l=add(s[2]);
        int r=add(s[4]);
        add_op(s[3],s[0],l,r);
    }
    for(int i=0;i<num;i++)
    {
        if(t[i].l!=-1)
        {
            ans[i][0]=exist(i);
            ans[i][1]='=';
            ans[i][2]=t[t[i].l].val.size()>0?exist(t[i].l):t[t[i].l].id;
            ans[i][3]=t[i].id;
            ans[i][4]=t[t[i].r].val.size()>0?exist(t[i].r):t[t[i].r].id;
            ans[i][5]='\0';
        }
    }
    for(int i=num-1;i>=0;i--)
    {
        if(ans[i][0]=='A')
        {
            dfs(i);break;
        }
    }
    for(int i=num-1;i>=0;i--)
    {
        if(ans[i][0]=='B')
        {
            dfs(i);break;
        }
    }
    for(int i=0;i<num;i++)
        if(flag[i])cout<<ans[i]<<endl;
}
